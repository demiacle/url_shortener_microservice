 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/



'use strict';

var fs = require('fs');
var urlExists = require('url-exists');
var routeShortUrl = require(process.cwd() + '/routeShortUrl.js');
var createShortUrl = require(process.cwd() + '/createShortUrl.js')
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

// Home page
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// Create new entry
app.route('/new/*')
    .get(function(req, res) {
  
      console.log( req.params )
      // validate website 
      // must conform to http://www.example.com
      // http:// or https://
      // check if site exists
      let url = req.params[0];
      let match = url.match( /http:\/\/|https:\/\// )
      console.log( match )
  
      urlExists( url, function(err, exists) {
        if( match !== null && exists ){
          createShortUrl( res, url );
        } else {
          res.json( { error: "The address '" + url + "' is invalid" } );
        }
      });
    })

// Rout a previously made short url
app.route('/:shortUrl')
    .get(function(req, res) {
      // Ignore node favicon request
      if( req.params.shortUrl === 'favicon.ico'){
         return;
      }
		  routeShortUrl( req, res, req.params.shortUrl );
    })



// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

